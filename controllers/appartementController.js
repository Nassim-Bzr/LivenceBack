import Appartement from "../models/Appartement.js";
import Disponibilite from "../models/Disponibilite.js";
import { Op } from "sequelize";

// ‚û§ R√©cup√©rer un appartement par SLUG
export const getAppartementBySlug = async (req, res) => {
  try {
    const appartement = await Appartement.findOne({ where: { slug: req.params.slug } });
    if (!appartement) return res.status(404).json({ message: "Appartement non trouv√©" });

    res.status(200).json(appartement);
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration de l'appartement", error });
  }
};

// ‚û§ Ajouter un appartement
export const ajouterAppartement = async (req, res) => {
  try {
    // V√©rification uniquement pour le slug
    if (req.body.slug) {
      const existingSlug = await Appartement.findOne({
        where: { slug: req.body.slug }
      });
      
      if (existingSlug) {
        return res.status(400).json({ 
          message: "Un appartement avec ce slug existe d√©j√†" 
        });
      }
    }

    const appartement = await Appartement.create(req.body);
    res.status(201).json(appartement);
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de l'ajout de l'appartement", error });
  }
};

// ‚û§ Mettre √† jour un appartement
export const updateAppartement = async (req, res) => {
  try {
    const appartement = await Appartement.findByPk(req.params.id);
    if (!appartement) return res.status(404).json({ message: "Appartement non trouv√©" });

    // Si un nouveau slug est fourni, v√©rifier qu'il n'existe pas d√©j√†
    if (req.body.slug && req.body.slug !== appartement.slug) {
      const existingSlug = await Appartement.findOne({
        where: { 
          slug: req.body.slug,
          id: { [Op.ne]: req.params.id } // Exclure l'appartement actuel
        }
      });
      
      if (existingSlug) {
        return res.status(400).json({ 
          message: "Un appartement avec ce slug existe d√©j√†" 
        });
      }
    }

    await appartement.update(req.body);
    res.status(200).json({ message: "Appartement mis √† jour avec succ√®s" });
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la mise √† jour de l'appartement", error });
  }
};

// ‚û§ Supprimer un appartement
export const deleteAppartement = async (req, res) => {
  try {
    const appartement = await Appartement.findByPk(req.params.id);
    if (!appartement) {
      return res.status(404).json({ message: "Appartement non trouv√©" });
    }

    // Supprimer d'abord les disponibilit√©s associ√©es
    await Disponibilite.destroy({
      where: { appartementId: req.params.id }
    });

    // Puis supprimer l'appartement
    await appartement.destroy();
    
    res.status(200).json({ message: "Appartement et ses disponibilit√©s supprim√©s avec succ√®s" });
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la suppression de l'appartement", error });
  }
};

// üîπ Ajouter une date bloqu√©e (bloquer un appart)
export const bloquerDate = async (req, res) => {
  const { appartementId, dates } = req.body; // Liste de dates √† bloquer

  try {
    const nouvellesIndispo = dates.map((date) => ({
      appartementId,
      date
    }));

    await Disponibilite.bulkCreate(nouvellesIndispo);
    res.status(201).json({ message: "Dates bloqu√©es avec succ√®s" });
  } catch (error) {
    res.status(500).json({ message: "Erreur lors du blocage des dates", error });
  }
};

// üîπ V√©rifier si un appartement est dispo sur une p√©riode
export const verifierDisponibilite = async (req, res) => {
  const { appartementId, dateArrivee, dateDepart } = req.body;

  try {
    console.log("üîç V√©rification de disponibilit√© pour :", appartementId, dateArrivee, dateDepart);

    const datesBloquees = await Disponibilite.findAll({
      where: {
        appartementId,
        date: { 
          [Op.between]: [dateArrivee, dateDepart]
        }
      },
    });

    console.log("üìÖ Dates bloqu√©es trouv√©es :", datesBloquees);

    if (datesBloquees.length > 0) {
      return res.status(400).json({ disponible: false, message: "Certaines dates sont bloqu√©es" });
    }

    res.status(200).json({ disponible: true, message: "L'appartement est disponible" });
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification de disponibilit√© :", error);
    res.status(500).json({ message: "Erreur lors de la v√©rification de disponibilit√©", error });
  }
};

export const ajouterDisponibilites = async (req, res) => {
  const { appartementId, dates } = req.body; // dates = ["2025-03-20", "2025-03-21"]

  try {
    const nouvellesDispos = dates.map((date) => ({
      appartementId,
      date,
      disponible: true,
    }));

    await Disponibilite.bulkCreate(nouvellesDispos);
    res.status(201).json({ message: "Disponibilit√©s ajout√©es avec succ√®s" });
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de l'ajout des disponibilit√©s", error });
  }
};

export const getDisponibilites = async (req, res) => {
  const { appartementId } = req.params;

  try {
    const datesBloquees = await Disponibilite.findAll({
      where: { appartementId },
      attributes: ["date"],
    });

    res.status(200).json(datesBloquees);
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des dates bloqu√©es", error });
  }
};

// ‚û§ R√©cup√©rer tous les appartements
export const getAppartements = async (req, res) => {
  try {
    const appartements = await Appartement.findAll();
    res.status(200).json(appartements);
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des appartements", error });
  }
};

// ‚û§ R√©cup√©rer un appartement par ID
export const getAppartementById = async (req, res) => {
  try {
    const appartement = await Appartement.findByPk(req.params.id);
    if (!appartement) return res.status(404).json({ message: "Appartement non trouv√©" });

    res.status(200).json(appartement);
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration de l'appartement", error });
  }
};
