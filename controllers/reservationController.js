import Reservation from "../models/Reservation.js";
import Appartement from "../models/Appartement.js";
import Disponibilite from "../models/Disponibilite.js"; // üî• Import du mod√®le pour bloquer les dates
import { Op } from "sequelize";
import { User } from "../models/index.js"; // üî• Import User depuis index.js

// üîπ Cr√©er une r√©servation
export const createReservation = async (req, res) => {
  console.log("üì• Donn√©es re√ßues dans le body :", req.body);
console.log("üë§ Utilisateur connect√© :", req.user);

  const { appartementId, startDate, endDate, totalPrice } = req.body;
  const userId = req.user.id; // üî• R√©cup√©r√© depuis le token

  try {
    // ‚û§ V√©rifier si les dates sont d√©j√† bloqu√©es
    const existingDates = await Disponibilite.findOne({
      where: {
        appartementId,
        date: {
          [Op.between]: [startDate, endDate],
        },
      },
    });

    if (existingDates) {
      return res.status(400).json({ message: "Certaines dates sont d√©j√† r√©serv√©es !" });
    }

    // ‚û§ Cr√©er la r√©servation
    const reservation = await Reservation.create({
      userId,
      appartementId,
      startDate,
      endDate,
      totalPrice,
      status: "en attente",
    });

    // ‚û§ Bloquer les dates en les ajoutant dans `Disponibilite`
    let currentDate = new Date(startDate);
    const end = new Date(endDate);

    while (currentDate <= end) {
      await Disponibilite.create({
        appartementId,
        date: currentDate,
      });
      currentDate.setDate(currentDate.getDate() + 1); // üî• Passer au jour suivant
    }

    res.status(201).json({ message: "R√©servation effectu√©e avec succ√®s", reservation });

  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©servation :", error);
    res.status(500).json({ message: "Erreur lors de la r√©servation", error });
  }
};

export const getUserReservations = async (req, res) => {
  const userId = req.user.id;

  try {
    const reservations = await Reservation.findAll({
      where: { userId },
      include: [
        {
          model: Appartement,
          as: "appartement",
          attributes: ["titre", "localisation", "images"],
        },
        {
          model: User,
          as: "user",
          attributes: ["id", "nom", "email"], // Ajout de l'ID explicitement
        }
      ],
    });

    console.log("üîç R√©servations trouv√©es :", reservations);
    res.status(200).json(reservations);
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration r√©servations backend :", error);
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des r√©servations", error });
  }
};

// üîπ Mettre √† jour le statut d'une r√©servation
export const updateReservationStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  const userId = req.user.id;

  try {
    // V√©rifier que le statut est valide
    const validStatuses = ["en attente", "confirm√©e", "annul√©e", "termin√©e"];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ 
        message: "Statut invalide", 
        validStatuses 
      });
    }

    // R√©cup√©rer la r√©servation
    const reservation = await Reservation.findByPk(id);
    
    if (!reservation) {
      return res.status(404).json({ message: "R√©servation non trouv√©e" });
    }

    // V√©rifier que l'utilisateur est le propri√©taire de la r√©servation ou un admin
    const user = await User.findByPk(userId);
    if (reservation.userId !== userId && user.role !== "admin") {
      return res.status(403).json({ message: "Vous n'√™tes pas autoris√© √† modifier cette r√©servation" });
    }

    // Mettre √† jour le statut
    await reservation.update({ status });

    // Si la r√©servation est annul√©e, lib√©rer les dates
    if (status === "annul√©e") {
      await Disponibilite.destroy({
        where: {
          appartementId: reservation.appartementId,
          date: {
            [Op.between]: [reservation.startDate, reservation.endDate]
          }
        }
      });
    }

    res.status(200).json({ 
      message: "Statut de la r√©servation mis √† jour avec succ√®s",
      reservation
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour du statut :", error);
    res.status(500).json({ message: "Erreur lors de la mise √† jour du statut", error });
  }
};

// üîπ R√©cup√©rer les d√©tails d'une r√©servation
export const getReservationById = async (req, res) => {
  const { id } = req.params;
  const userId = req.user.id;

  try {
    const reservation = await Reservation.findByPk(id, {
      include: [
        {
          model: Appartement,
          as: "appartement",
          attributes: ["titre", "localisation", "images", "prixParNuit"]
        },
        {
          model: User,
          as: "user",
          attributes: ["nom", "email"]
        }
      ]
    });

    if (!reservation) {
      return res.status(404).json({ message: "R√©servation non trouv√©e" });
    }

    // V√©rifier que l'utilisateur est le propri√©taire de la r√©servation ou un admin
    const user = await User.findByPk(userId);
    if (reservation.userId !== userId && user.role !== "admin") {
      return res.status(403).json({ message: "Vous n'√™tes pas autoris√© √† acc√©der √† cette r√©servation" });
    }

    res.status(200).json(reservation);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration de la r√©servation :", error);
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration de la r√©servation", error });
  }
};

// üîπ R√©cup√©rer toutes les r√©servations (admin uniquement)
// üîπ R√©cup√©rer toutes les r√©servations (admin uniquement)
export const getAllReservations = async (req, res) => {
  try {
    // V√©rifier que l'utilisateur est admin
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "Acc√®s non autoris√©" });
    }

    const reservations = await Reservation.findAll({
      include: [
        {
          model: Appartement,
          as: "appartement",
          attributes: ["titre", "localisation", "images"],
        },
        {
          model: User,
          as: "user",
          attributes: ["id", "nom", "email"], // Ajout de l'ID explicitement
        }
      ],
      order: [["createdAt", "DESC"]]
    });

    res.status(200).json(reservations);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration de toutes les r√©servations:", error);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üîπ V√©rifier si une r√©servation Smoobu existe d√©j√†
export const checkSmoobuReservation = async (req, res) => {
  const { smoobuId } = req.params;

  try {
    const reservation = await Reservation.findOne({
      where: { smoobuReservationId: smoobuId }
    });

    if (reservation) {
      return res.status(200).json({ 
        exists: true, 
        id: reservation.id,
        status: reservation.status 
      });
    } else {
      return res.status(200).json({ exists: false });
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification de la r√©servation Smoobu:", error);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üîπ Mettre √† jour une r√©servation existante
export const updateReservation = async (req, res) => {
  const { id } = req.params;
  const updateData = req.body;

  try {
    // R√©cup√©rer la r√©servation
    const reservation = await Reservation.findByPk(id);
    
    if (!reservation) {
      return res.status(404).json({ message: "R√©servation non trouv√©e" });
    }

    // V√©rifier que l'utilisateur est le propri√©taire de la r√©servation ou un admin
    const user = await User.findByPk(req.user.id);
    if (reservation.userId !== req.user.id && user.role !== "admin") {
      return res.status(403).json({ message: "Vous n'√™tes pas autoris√© √† modifier cette r√©servation" });
    }

    // Si le statut change, il faut g√©rer diff√©remment les dates
    if (updateData.status && updateData.status !== reservation.status) {
      if (updateData.status === "annul√©e" && reservation.status !== "annul√©e") {
        // Si on annule la r√©servation, lib√©rer les dates
        await Disponibilite.destroy({
          where: {
            appartementId: reservation.appartementId,
            date: {
              [Op.between]: [reservation.startDate, reservation.endDate]
            }
          }
        });
      } else if (reservation.status === "annul√©e" && updateData.status !== "annul√©e") {
        // Si on r√©active une r√©servation annul√©e, bloquer les dates
        let currentDate = new Date(reservation.startDate);
        const end = new Date(reservation.endDate);

        while (currentDate <= end) {
          await Disponibilite.create({
            appartementId: reservation.appartementId,
            date: new Date(currentDate)
          });
          currentDate.setDate(currentDate.getDate() + 1);
        }
      }
    }

    // Si les dates changent, mettre √† jour les disponibilit√©s
    if ((updateData.startDate && updateData.startDate !== reservation.startDate) ||
        (updateData.endDate && updateData.endDate !== reservation.endDate)) {
      
      // Supprimer les anciennes dates bloqu√©es
      await Disponibilite.destroy({
        where: {
          appartementId: reservation.appartementId,
          date: {
            [Op.between]: [reservation.startDate, reservation.endDate]
          }
        }
      });

      // Bloquer les nouvelles dates si la r√©servation n'est pas annul√©e
      if (updateData.status !== "annul√©e") {
        const startDate = updateData.startDate || reservation.startDate;
        const endDate = updateData.endDate || reservation.endDate;

        let currentDate = new Date(startDate);
        const end = new Date(endDate);

        while (currentDate <= end) {
          await Disponibilite.create({
            appartementId: reservation.appartementId,
            date: new Date(currentDate)
          });
          currentDate.setDate(currentDate.getDate() + 1);
        }
      }
    }

    // Mettre √† jour la r√©servation
    await reservation.update(updateData);

    res.status(200).json({
      message: "R√©servation mise √† jour avec succ√®s",
      reservation
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour de la r√©servation:", error);
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};
